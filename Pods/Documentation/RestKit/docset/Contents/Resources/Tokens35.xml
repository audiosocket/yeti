<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKPathMatcher.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKPathMatcher</TokenIdentifier>
			<Abstract type="html">The RKPathMatcher class performs pattern matching and parameter parsing of strings, typically representing the path portion of an NSURL object. It provides much of the necessary tools to map a given path to local objects (the inverse of RKRouter&apos;s function).  This makes it easier to implement the RKManagedObjectCaching protocol and generate NSFetchRequest objects from a given path.  There are two means of instantiating and using a matcher object in order to provide more flexibility in implementations, and to improve efficiency by eliminating repetitive and costly pattern initializations.</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>
			
			<NodeRef refid="35"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKPathMatcher/pathMatcherWithPath:</TokenIdentifier>
			<Abstract type="html">Creates a path match object starting from a path string.  This method should be followed by matchesPattern:tokenizeQueryStrings:parsedArguments:</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)pathMatcherWithPath:(NSString *)pathString</Declaration>
			<Parameters>
				<Parameter>
					<Name>pathString</Name>
					<Abstract type="html">The string to evaluate and parse, such as /districts/tx/upper/?apikey=GC5512354</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instantiated RKPathMatcher without an established pattern.</Abstract></ReturnValue>
			<Anchor>//api/name/pathMatcherWithPath:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPathMatcher/matchesPattern:tokenizeQueryStrings:parsedArguments:</TokenIdentifier>
			<Abstract type="html">Determines if the path string matches the provided pattern, and yields a dictionary with the resulting matched key/value pairs.  Use of this method should be preceded by pathMatcherWithPath: Pattern strings should include encoded parameter keys, delimited by a single colon at the beginning of the key name.</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>- (BOOL)matchesPattern:(NSString *)patternString tokenizeQueryStrings:(BOOL)shouldTokenize parsedArguments:(NSDictionary **)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>patternString</Name>
					<Abstract type="html">The pattern to use for evaluating, such as /:entityName/:stateID/:chamber/</Abstract>
				</Parameter><Parameter>
					<Name>shouldTokenize</Name>
					<Abstract type="html">If YES, any query parameters will be tokenized and inserted into the parsed argument dictionary.</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract type="html">A pointer to a dictionary that contains the key/values from the pattern (and parameter) matching.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean value indicating if the path string successfully matched the pattern.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesPattern:tokenizeQueryStrings:parsedArguments:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKPathMatcher/pathMatcherWithPattern:</TokenIdentifier>
			<Abstract type="html">Creates a path matcher object starting from a pattern string.  This method should be followed by matchesPath:tokenizeQueryStrings:parsedArguments:.  Patterns should include encoded parameter keys, delimited by a single colon at the beginning of the key name.</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)pathMatcherWithPattern:(NSString *)patternString</Declaration>
			<Parameters>
				<Parameter>
					<Name>patternString</Name>
					<Abstract type="html">The pattern to use for evaluating, such as /:entityName/:stateID/:chamber/</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instantiated RKPathMatcher with an established pattern.</Abstract></ReturnValue>
			<Anchor>//api/name/pathMatcherWithPattern:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPathMatcher/matchesPath:tokenizeQueryStrings:parsedArguments:</TokenIdentifier>
			<Abstract type="html">Determines if the given path string matches a pattern, and yields a dictionary with the resulting matched key/value pairs.  Use of this method should be preceded by pathMatcherWithPattern:.</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>- (BOOL)matchesPath:(NSString *)pathString tokenizeQueryStrings:(BOOL)shouldTokenize parsedArguments:(NSDictionary **)arguments</Declaration>
			<Parameters>
				<Parameter>
					<Name>pathString</Name>
					<Abstract type="html">The string to evaluate and parse, such as /districts/tx/upper/?apikey=GC5512354</Abstract>
				</Parameter><Parameter>
					<Name>shouldTokenize</Name>
					<Abstract type="html">If YES, any query parameters will be tokenized and inserted into the parsed argument dictionary.</Abstract>
				</Parameter><Parameter>
					<Name>arguments</Name>
					<Abstract type="html">A pointer to a dictionary that contains the key/values from the pattern (and parameter) matching.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean value indicating if the path string successfully matched the pattern.</Abstract></ReturnValue>
			<Anchor>//api/name/matchesPath:tokenizeQueryStrings:parsedArguments:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPathMatcher/pathFromObject:addingEscapes:</TokenIdentifier>
			<Abstract type="html">Generates a path by interpolating the properties of the &apos;object&apos; argument, assuming the existence of a previously specified pattern established via pathMatcherWithPattern:.  Otherwise, this method is identical in function to RKPathFromPatternWithObject (in fact it is a shortcut for this method).</Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>- (NSString *)pathFromObject:(id)object addingEscapes:(BOOL)addEscapes</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object containing the properties to interpolate.</Abstract>
				</Parameter><Parameter>
					<Name>addEscapes</Name>
					<Abstract type="html">Conditionally add percent escapes to the interpolated property values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string with the object&apos;s interpolated property values inserted into the receiver&apos;s established pattern.</Abstract></ReturnValue>
			<Anchor>//api/name/pathFromObject:addingEscapes:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPathMatcher/setQueryParameters:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>@property (copy, readonly) NSDictionary *queryParameters</Declaration>
			
			
			<Anchor>//api/name/queryParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPathMatcher/queryParameters</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RKPathMatcher.h</DeclaredIn>			
			
			<Declaration>@property (copy, readonly) NSDictionary *queryParameters</Declaration>
			
			
			<Anchor>//api/name/queryParameters</Anchor>
		</Token>
		
	</File>
</Tokens>