<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKObjectManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKObjectManager</TokenIdentifier>
			<Abstract type="html">The RKObjectManager class provides a centralized interface for performing object mapping based HTTP request and response operations. It encapsulates common configuration such as request/response descriptors and routing, provides for the creation of NSURLRequest and RKObjectRequestOperation objects, and one-line methods to enqueue object request operations for the basic HTTP request methods (GET, POST, PUT, DELETE, etc).</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>
			
			<NodeRef refid="27"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectManager/sharedManager</TokenIdentifier>
			<Abstract type="html">Return the shared instance of the object manager</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)sharedManager</Declaration>
			
			<ReturnValue><Abstract type="html">The shared manager instance.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedManager</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectManager/setSharedManager:</TokenIdentifier>
			<Abstract type="html">Set the shared instance of the object manager</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>+ (void)setSharedManager:(RKObjectManager *)manager</Declaration>
			<Parameters>
				<Parameter>
					<Name>manager</Name>
					<Abstract type="html">The new shared manager instance.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSharedManager:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectManager/managerWithBaseURL:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new RKObjectManager object initialized with a new AFHTTPClient object that was in turn initialized with the given base URL. The RestKit defaults are applied to the object manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)managerWithBaseURL:(NSURL *)baseURL</Declaration>
			<Parameters>
				<Parameter>
					<Name>baseURL</Name>
					<Abstract type="html">The base URL with which to initialize the AFHTTPClient object</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new RKObjectManager initialized with an AFHTTPClient that was initialized with the given baseURL.</Abstract></ReturnValue>
			<Anchor>//api/name/managerWithBaseURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/initWithHTTPClient:</TokenIdentifier>
			<Abstract type="html">Initializes the receiver with the given AFNetworking HTTP client object, adopting the network configuration from the client.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (id)initWithHTTPClient:(AFHTTPClient *)client</Declaration>
			<Parameters>
				<Parameter>
					<Name>client</Name>
					<Abstract type="html">The AFNetworking HTTP client with which to initialize the receiver.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given client.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithHTTPClient:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setHTTPClient:</TokenIdentifier>
			<Abstract type="html">The AFNetworking HTTP client with which the receiver makes requests.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readwrite) AFHTTPClient *HTTPClient</Declaration>
			
			
			<Anchor>//api/name/HTTPClient</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/HTTPClient</TokenIdentifier>
			<Abstract type="html">The AFNetworking HTTP client with which the receiver makes requests.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readwrite) AFHTTPClient *HTTPClient</Declaration>
			
			
			<Anchor>//api/name/HTTPClient</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setBaseURL:</TokenIdentifier>
			<Abstract type="html">The base URL of the underlying HTTP client.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/baseURL</TokenIdentifier>
			<Abstract type="html">The base URL of the underlying HTTP client.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setDefaultHeaders:</TokenIdentifier>
			<Abstract type="html">The default HTTP headers for all NSURLRequest objects constructed by the object manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSDictionary *defaultHeaders</Declaration>
			
			
			<Anchor>//api/name/defaultHeaders</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/defaultHeaders</TokenIdentifier>
			<Abstract type="html">The default HTTP headers for all NSURLRequest objects constructed by the object manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSDictionary *defaultHeaders</Declaration>
			
			
			<Anchor>//api/name/defaultHeaders</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setOperationQueue:</TokenIdentifier>
			<Abstract type="html">The operation queue which manages operations enqueued by the object manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/operationQueue</TokenIdentifier>
			<Abstract type="html">The operation queue which manages operations enqueued by the object manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setRouter:</TokenIdentifier>
			<Abstract type="html">The router used to generate URL objects for routable requests created by the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKRouter *router</Declaration>
			
			
			<Anchor>//api/name/router</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/router</TokenIdentifier>
			<Abstract type="html">The router used to generate URL objects for routable requests created by the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKRouter *router</Declaration>
			
			
			<Anchor>//api/name/router</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setRequestSerializationMIMEType:</TokenIdentifier>
			<Abstract type="html">The MIME Type to serialize request parameters into when constructing request objects.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *requestSerializationMIMEType</Declaration>
			
			
			<Anchor>//api/name/requestSerializationMIMEType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/requestSerializationMIMEType</TokenIdentifier>
			<Abstract type="html">The MIME Type to serialize request parameters into when constructing request objects.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *requestSerializationMIMEType</Declaration>
			
			
			<Anchor>//api/name/requestSerializationMIMEType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setAcceptHeaderWithMIMEType:</TokenIdentifier>
			<Abstract type="html">Sets a default header on the HTTP client for the HTTP &quot;Accept&quot; header to specify the preferred serialization format for retrieved data.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)setAcceptHeaderWithMIMEType:(NSString *)MIMEType</Declaration>
			<Parameters>
				<Parameter>
					<Name>MIMEType</Name>
					<Abstract type="html">The MIME Type to set as the value for the HTTP &quot;Accept&quot; header.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAcceptHeaderWithMIMEType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/requestWithObject:method:path:parameters:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSMutableURLRequest object with a given object, method, path, and parameters.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKObjectParameterization</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/RKRouter</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSMutableURLRequest *)requestWithObject:(id)object method:(RKRequestMethod)method path:(NSString *)path parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the request. For the POST, PUT, and PATCH request methods, the object will parameterized using the RKRequestDescriptor for the object.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The HTTP method for the request, such as GET, POST, PUT, or DELETE.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the router is consulted.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be either set as a query string for GET requests, or reverse merged with the parameterization of the object and set as the request HTTP body.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSMutableURLRequest object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestWithObject:method:path:parameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/multipartFormRequestWithObject:method:path:parameters:constructingBodyWithBlock:</TokenIdentifier>
			<Abstract type="html">Creates an NSMutableURLRequest object with the specified HTTP method and path, and constructs a multipart/form-data HTTP body, using the specified parameters and multipart form data block. See http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.2</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (NSMutableURLRequest *)multipartFormRequestWithObject:(id)object method:(RKRequestMethod)method path:(NSString *)path parameters:(NSDictionary *)parameters constructingBodyWithBlock:(void ( ^ ) ( id&lt;AFMultipartFormData&gt; formData ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the request. For the POST, PUT, and PATCH request methods, the object will parameterized using the RKRequestDescriptor for the object.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The HTTP method for the request, such as GET, POST, PUT, or DELETE.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the router is consulted.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be either set as a query string for GET requests, or reverse merged with the parameterization of the object and set as the request HTTP body.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that takes a single argument and appends data to the HTTP body. The block argument is an object adopting the AFMultipartFormData protocol. This can be used to upload files, encode HTTP body as JSON or XML, or specify multiple values for the same parameter, as one might for array values.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSMutableURLRequest object.</Abstract></ReturnValue>
			<Anchor>//api/name/multipartFormRequestWithObject:method:path:parameters:constructingBodyWithBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/requestWithPathForRouteNamed:object:parameters:</TokenIdentifier>
			<Abstract type="html">Creates an NSMutableURLRequest object with the NSURL returned by the router for the given route name and object and the given parameters.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (NSMutableURLRequest *)requestWithPathForRouteNamed:(NSString *)routeName object:(id)object parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>routeName</Name>
					<Abstract type="html">The name of the route object containing the path pattern which is to be interpolated against the given object, appended to the HTTP client&apos;s base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to interpolate the path pattern of the named route. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be either set as a query string for GET requests, or the request HTTP body.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSMutableRequest object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestWithPathForRouteNamed:object:parameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/requestWithPathForRelationship:ofObject:method:parameters:</TokenIdentifier>
			<Abstract type="html">Creates an NSMutableURLRequest object with the NSURL returned by the router for the relationship of the given object and the given parameters.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (NSMutableURLRequest *)requestWithPathForRelationship:(NSString *)relationship ofObject:(id)object method:(RKRequestMethod)method parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object for which related objects are being loaded. Evaluated against the RKRoute for the relationship for the object&apos;s class with the given name to compute the path. Cannot be nil.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The HTTP method for the request.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL, or parameterized and set as the request body. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>relationshipName</Name>
					<Abstract type="html">The name of the relationship being loaded. Used to retrieve the RKRoute object from the router for the given object&apos;s class and the relationship name. Cannot be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSMutableURLRequest object for the specified relationship.

@raises NSInvalidArgumentException Raised if no route is configured for a relationship of the given object&apos;s class with the given name.</Abstract></ReturnValue>
			<Anchor>//api/name/requestWithPathForRelationship:ofObject:method:parameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setHTTPOperationClass:</TokenIdentifier>
			<Abstract type="html">Sets the RKHTTPRequestOperation subclass to be used when constructing HTTP request operations for requests dispatched through the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)setHTTPOperationClass:(Class)operationClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>operationClass</Name>
					<Abstract type="html">A class object inheriting from RKHTTPRequestOperation to be used for HTTP requests dispatched through the manager.
@raises NSInvalidArgumentException Raised if the given class does not inherit from RKHTTPRequestOperation.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setHTTPOperationClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/objectRequestOperationWithRequest:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation operation with the given request and sets the completion block with the given success and failure blocks.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (RKObjectRequestOperation *)objectRequestOperationWithRequest:(NSURLRequest *)request success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The request object to be loaded asynchronously during execution of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An RKObjectRequestOperation object that is ready to be sent.</Abstract></ReturnValue>
			<Anchor>//api/name/objectRequestOperationWithRequest:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/managedObjectRequestOperationWithRequest:managedObjectContext:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKManagedObjectRequestOperation operation with the given request and managed object context, and sets the completion block with the given success and failure blocks.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (RKManagedObjectRequestOperation *)managedObjectRequestOperationWithRequest:(NSURLRequest *)request managedObjectContext:(NSManagedObjectContext *)managedObjectContext success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The request object to be loaded asynchronously during execution of the operation.</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The managed object context with which to associate the operation. This context will be used as the parent context of a new operation local NSManagedObjectContext with the NSPrivateQueueConcurrencyType concurrency type. Upon success, the private context will be saved and changes resulting from the object mapping will be &apos;pushed&apos; to the given context.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An RKObjectRequestOperation object that is ready to be sent.</Abstract></ReturnValue>
			<Anchor>//api/name/managedObjectRequestOperationWithRequest:managedObjectContext:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
			<Abstract type="html">Creates and returns an object request operation of the appropriate type for the given object, request method, path, and parameters.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (id)appropriateObjectRequestOperationWithObject:(id)object method:(RKRequestMethod)method path:(NSString *)path parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The request method for the request.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s baseURL and set as the URL of the request. If nil, the router is consulted.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be either set as a query string for GET requests, or reverse merged with the parameterization of the object and set as the request HTTP body.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A newly created RKObjectRequestOperation or RKManagedObjectRequest operation as deemed appropriate by the manager for the given parameters.</Abstract></ReturnValue>
			<Anchor>//api/name/appropriateObjectRequestOperationWithObject:method:path:parameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/enqueueObjectRequestOperation:</TokenIdentifier>
			<Abstract type="html">Enqueues an RKObjectRequestOperation to the object manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueObjectRequestOperation:(RKObjectRequestOperation *)objectRequestOperation</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectRequestOperation</Name>
					<Abstract type="html">The object request operation to be enqueued.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueObjectRequestOperation:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/cancelAllObjectRequestOperationsWithMethod:matchingPathPattern:</TokenIdentifier>
			<Abstract type="html">Cancels all operations in the object manager&apos;s operation queue whose requests match the specified HTTP method and path pattern.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)cancelAllObjectRequestOperationsWithMethod:(RKRequestMethod)method matchingPathPattern:(NSString *)pathPattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>method</Name>
					<Abstract type="html">The HTTP method to match for the cancelled requests, such as RKRequestMethodGET, RKRequestMethodPOST, RKRequestMethodPUT, RKRequestMethodPatch, or RKRequestMethodDELETE. If RKRequestMethodAny, all object request operations with URLs matching the given path pattern will be cancelled.</Abstract>
				</Parameter><Parameter>
					<Name>pathPattern</Name>
					<Abstract type="html">The pattern to match against the path of the request URL for executing object request operations considered for cancellation.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelAllObjectRequestOperationsWithMethod:matchingPathPattern:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/enqueueBatchOfObjectRequestOperationsWithRoute:objects:progress:completion:</TokenIdentifier>
			<Abstract type="html">Creates and enqueues an RKObjectRequestOperation to the object manager&apos;s operation queue for each specified object into a batch. Each object request operation is built by evaluating the object against the given route to construct a request path and then invoking appropriateObjectRequestOperationWithObject:method:path:parameters:. When each object request operation finishes, the specified progress block is executed, until all of the request operations have finished, at which point the completion block also executes.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueBatchOfObjectRequestOperationsWithRoute:(RKRoute *)route objects:(NSArray *)objects progress:(void ( ^ ) ( NSUInteger numberOfFinishedOperations , NSUInteger totalNumberOfOperations ))progress completion:(void ( ^ ) ( NSArray *operations ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>route</Name>
					<Abstract type="html">The route specifying the request method and the path pattern with which to construct the request for each object object request operation in the batch.</Abstract>
				</Parameter><Parameter>
					<Name>objects</Name>
					<Abstract type="html">The set of objects for which to enqueue a batch of object request operations.</Abstract>
				</Parameter><Parameter>
					<Name>progress</Name>
					<Abstract type="html">A block object to be executed when an object request operation completes. This block has no return value and takes two arguments: the number of finished operations and the total number of operations initially executed.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block object to be executed when the object request operations complete. This block has no return value and takes one argument: the list of operations executed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueBatchOfObjectRequestOperationsWithRoute:objects:progress:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/enqueueBatchOfObjectRequestOperations:progress:completion:</TokenIdentifier>
			<Abstract type="html">Enqueues a set of RKObjectRequestOperation to the object manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)enqueueBatchOfObjectRequestOperations:(NSArray *)operations progress:(void ( ^ ) ( NSUInteger numberOfFinishedOperations , NSUInteger totalNumberOfOperations ))progress completion:(void ( ^ ) ( NSArray *operations ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>operations</Name>
					<Abstract type="html">The set of object request operations to be enqueued.</Abstract>
				</Parameter><Parameter>
					<Name>progress</Name>
					<Abstract type="html">A block object to be executed when an object request operation completes. This block has no return value and takes two arguments: the number of finished operations and the total number of operations initially executed.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block object to be executed when the object request operations complete. This block has no return value and takes one argument: the list of operations executed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueBatchOfObjectRequestOperations:progress:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/getObjectsAtPath:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a GET request with a URL for the given path, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getObjectsAtPath:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getObjectsAtPath:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/getObjectsAtPathForRelationship:ofObject:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a GET request for the relationship with the given name of the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForRelationship:ofObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getObjectsAtPathForRelationship:(NSString *)relationshipName ofObject:(id)object parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>relationshipName</Name>
					<Abstract type="html">The name of the relationship being loaded. Used to retrieve the RKRoute object from the router for the given object&apos;s class and the relationship name. Cannot be nil.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The object for which related objects are being loaded. Evaluated against the RKRoute for the relationship for the object&apos;s class with the given name to compute the path. Cannot be nil.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the mapped result created from object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.

@raises NSInvalidArgumentException Raised if no route is configured for a relationship of the given object&apos;s class with the given name.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getObjectsAtPathForRelationship:ofObject:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/getObjectsAtPathForRouteNamed:object:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a GET request for the URL returned by the router for the given route name, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForRouteNamed:method:object:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getObjectsAtPathForRouteNamed:(NSString *)routeName object:(id)object parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>routeName</Name>
					<Abstract type="html">The name of the route being loaded. Used to retrieve the RKRoute object from the router with the given name. Cannot be nil.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to be interpolated against the path pattern of the RKRoute object retrieved with the given name. Used to compute the path to be appended to the HTTP client&apos;s base URL and used as the request URL. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL. May be nil.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the mapped result created from object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.

@raises NSInvalidArgumentException Raised if no route is configured with the given name or the route returned specifies an HTTP method other than GET.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getObjectsAtPathForRouteNamed:object:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/getObject:path:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a GET request for the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getObject:(id)object path:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. If nil, then the path must be provided.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the request URL will be obtained by consulting the router for a route registered for the given object&apos;s class and the RKRequestMethodGET request method.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getObject:path:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/postObject:path:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a POST request for the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)postObject:(id)object path:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. If nil, then the path must be provided.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the request URL will be obtained by consulting the router for a route registered for the given object&apos;s class and the RKRequestMethodPOST method.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be reverse merged with the parameterization of the given object and set as the request body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/postObject:path:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/putObject:path:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a PUT request for the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)putObject:(id)object path:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. If nil, then the path must be provided.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the request URL will be obtained by consulting the router for a route registered for the given object&apos;s class and the RKRequestMethodPUT method.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be reverse merged with the parameterization of the given object and set as the request body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/putObject:path:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/patchObject:path:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a PATCH request for the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)patchObject:(id)object path:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. If nil, then the path must be provided.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the request URL will be obtained by consulting the router for a route registered for the given object&apos;s class and the RKRequestMethodPATCH method.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be reverse merged with the parameterization of the given object and set as the request body.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/patchObject:path:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/deleteObject:path:parameters:success:failure:</TokenIdentifier>
			<Abstract type="html">Creates an RKObjectRequestOperation with a DELETE request for the given object, and enqueues it to the manager&apos;s operation queue.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/RKRouter/URLForObject:method:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/appropriateObjectRequestOperationWithObject:method:path:parameters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deleteObject:(id)object path:(NSString *)path parameters:(NSDictionary *)parameters success:(void ( ^ ) ( RKObjectRequestOperation *operation , RKMappingResult *mappingResult ))success failure:(void ( ^ ) ( RKObjectRequestOperation *operation , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object with which to construct the object request operation. If nil, then the path must be provided.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to be appended to the HTTP client&apos;s base URL and used as the request URL. If nil, the request URL will be obtained by consulting the router for a route registered for the given object&apos;s class and the RKRequestMethodDELETE request method.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The parameters to be encoded and appended as the query string for the request URL.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the object request operation finishes successfully. This block has no return value and takes two arguments: the created object request operation and the RKMappingResult object created by object mapping the response data of request.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the request operation finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the resonse data. This block has no return value and takes two arguments:, the created request operation and the NSError object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteObject:path:parameters:success:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setRequestDescriptors:</TokenIdentifier>
			<Abstract type="html">Returns an array containing the RKRequestDescriptor objects added to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKRequestDescriptor</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, readonly) NSArray *requestDescriptors</Declaration>
			
			<ReturnValue><Abstract type="html">An array containing the request descriptors of the receiver. The elements of the array are instances of RKRequestDescriptor.</Abstract></ReturnValue>
			<Anchor>//api/name/requestDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/requestDescriptors</TokenIdentifier>
			<Abstract type="html">Returns an array containing the RKRequestDescriptor objects added to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKRequestDescriptor</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, readonly) NSArray *requestDescriptors</Declaration>
			
			<ReturnValue><Abstract type="html">An array containing the request descriptors of the receiver. The elements of the array are instances of RKRequestDescriptor.</Abstract></ReturnValue>
			<Anchor>//api/name/requestDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/addRequestDescriptor:</TokenIdentifier>
			<Abstract type="html">Adds a request descriptor to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)addRequestDescriptor:(RKRequestDescriptor *)requestDescriptor</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestDescriptor</Name>
					<Abstract type="html">The request descriptor object to the be added to the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addRequestDescriptor:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/addRequestDescriptorsFromArray:</TokenIdentifier>
			<Abstract type="html">Adds the RKRequestDescriptor objects contained in a given array to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)addRequestDescriptorsFromArray:(NSArray *)requestDescriptors</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestDescriptors</Name>
					<Abstract type="html">An array of RKRequestDescriptor objects to be added to the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addRequestDescriptorsFromArray:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/removeRequestDescriptor:</TokenIdentifier>
			<Abstract type="html">Removes a given request descriptor from the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)removeRequestDescriptor:(RKRequestDescriptor *)requestDescriptor</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestDescriptor</Name>
					<Abstract type="html">An RKRequestDescriptor object to be removed from the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeRequestDescriptor:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setResponseDescriptors:</TokenIdentifier>
			<Abstract type="html">Returns an array containing the RKResponseDescriptor objects added to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKResponseDescriptor</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, readonly) NSArray *responseDescriptors</Declaration>
			
			<ReturnValue><Abstract type="html">An array containing the request descriptors of the receiver. The elements of the array are instances of RKRequestDescriptor.</Abstract></ReturnValue>
			<Anchor>//api/name/responseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/responseDescriptors</TokenIdentifier>
			<Abstract type="html">Returns an array containing the RKResponseDescriptor objects added to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKResponseDescriptor</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, readonly) NSArray *responseDescriptors</Declaration>
			
			<ReturnValue><Abstract type="html">An array containing the request descriptors of the receiver. The elements of the array are instances of RKRequestDescriptor.</Abstract></ReturnValue>
			<Anchor>//api/name/responseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/addResponseDescriptor:</TokenIdentifier>
			<Abstract type="html">Adds a response descriptor to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)addResponseDescriptor:(RKResponseDescriptor *)responseDescriptor</Declaration>
			<Parameters>
				<Parameter>
					<Name>responseDescriptor</Name>
					<Abstract type="html">The response descriptor object to the be added to the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addResponseDescriptor:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/addResponseDescriptorsFromArray:</TokenIdentifier>
			<Abstract type="html">Adds the RKResponseDescriptor objects contained in a given array to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)addResponseDescriptorsFromArray:(NSArray *)responseDescriptors</Declaration>
			<Parameters>
				<Parameter>
					<Name>responseDescriptors</Name>
					<Abstract type="html">An array of RKResponseDescriptor objects to be added to the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addResponseDescriptorsFromArray:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/removeResponseDescriptor:</TokenIdentifier>
			<Abstract type="html">Removes a given response descriptor from the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)removeResponseDescriptor:(RKResponseDescriptor *)responseDescriptor</Declaration>
			<Parameters>
				<Parameter>
					<Name>responseDescriptor</Name>
					<Abstract type="html">An RKResponseDescriptor object to be removed from the manager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeResponseDescriptor:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setManagedObjectStore:</TokenIdentifier>
			<Abstract type="html">A Core Data backed object store for persisting objects that have been fetched from the Web</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKManagedObjectStore *managedObjectStore</Declaration>
			
			
			<Anchor>//api/name/managedObjectStore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/managedObjectStore</TokenIdentifier>
			<Abstract type="html">A Core Data backed object store for persisting objects that have been fetched from the Web</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKManagedObjectStore *managedObjectStore</Declaration>
			
			
			<Anchor>//api/name/managedObjectStore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setFetchRequestBlocks:</TokenIdentifier>
			<Abstract type="html">An array of RKFetchRequestBlock blocks used to map NSURL objects into corresponding NSFetchRequest objects.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/fetchRequestBlocks</TokenIdentifier>
			<Abstract type="html">An array of RKFetchRequestBlock blocks used to map NSURL objects into corresponding NSFetchRequest objects.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/addFetchRequestBlock:</TokenIdentifier>
			<Abstract type="html">Adds the given RKFetchRequestBlock block to the manager.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>- (void)addFetchRequestBlock:(RKFetchRequestBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>A</Name>
					<Abstract type="html">block object to be executed when constructing an NSFetchRequest object from a given NSURL. The block has a return type of NSFetchRequest and accepts a single NSURL argument.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addFetchRequestBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/setPaginationMapping:</TokenIdentifier>
			<Abstract type="html">The object mapping describing how to map pagination metadata from paginated responses.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKObjectMapping *paginationMapping</Declaration>
			
			
			<Anchor>//api/name/paginationMapping</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectManager/paginationMapping</TokenIdentifier>
			<Abstract type="html">The object mapping describing how to map pagination metadata from paginated responses.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKObjectMapping *paginationMapping</Declaration>
			
			
			<Anchor>//api/name/paginationMapping</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectManager/paginatorWithPathPattern:</TokenIdentifier>
			<Abstract type="html">Creates and returns a paginator object configured to paginate the collection resource accessible at the specified path pattern.</Abstract>
			<DeclaredIn>RKObjectManager.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKPaginator</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (RKPaginator *)paginatorWithPathPattern:(NSString *)pathPattern</Declaration>
			<Parameters>
				<Parameter>
					<Name>pathPattern</Name>
					<Abstract type="html">A patterned URL fragment to be appended to the baseURL of the receiver in order to construct the pattern URL with which to access the paginated collection.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The newly created paginator instance.</Abstract></ReturnValue>
			<Anchor>//api/name/paginatorWithPathPattern:</Anchor>
		</Token>
		
	</File>
</Tokens>