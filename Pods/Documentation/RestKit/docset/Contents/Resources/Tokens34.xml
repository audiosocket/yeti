<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKPaginator.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKPaginator</TokenIdentifier>
			<Abstract type="html">Instances of RKPaginator retrieve paginated collections of mappable data from remote systems via HTTP. Paginators perform GET requests and use a patterned URL to construct a full URL reflecting the state of the paginator. Paginators rely on an instance of RKObjectMappingProvider to determine how to perform object mapping on the retrieved data. Paginators can load Core Data backed models provided that an instance of RKManagedObjectStore is assigned to the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>
			
			<NodeRef refid="34"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/initWithRequest:paginationMapping:responseDescriptors:</TokenIdentifier>
			<Abstract type="html">Initializes a RKPaginator object with the a provided patternURL and mappingProvider.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (id)initWithRequest:(NSURLRequest *)request paginationMapping:(RKObjectMapping *)paginationMapping responseDescriptors:(NSArray *)responseDescriptors</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A request with a URL containing a dynamic pattern specifying how paginated resources are to be acessed.</Abstract>
				</Parameter><Parameter>
					<Name>paginationMapping</Name>
					<Abstract type="html">The pagination mapping specifying how pagination metadata is to be mapped from responses.</Abstract>
				</Parameter><Parameter>
					<Name>responseDescriptors</Name>
					<Abstract type="html">An array of response descriptors describing how to map object representations loaded by object request operations dispatched by the paginator.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the request, pagination mapping, and response descriptors.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithRequest:paginationMapping:responseDescriptors:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setPatternURL:</TokenIdentifier>
			<Abstract type="html">A URL with a path pattern for building a complete URL from
which to load the paginated resource collection. The patterned resource
path will be evaluated against the state of the paginator object itself.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *patternURL</Declaration>
			
			
			<Anchor>//api/name/patternURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/patternURL</TokenIdentifier>
			<Abstract type="html">A URL with a path pattern for building a complete URL from
which to load the paginated resource collection. The patterned resource
path will be evaluated against the state of the paginator object itself.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *patternURL</Declaration>
			
			
			<Anchor>//api/name/patternURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setURL:</TokenIdentifier>
			<Abstract type="html">Returns a complete URL to the paginated resource collection by interpolating the state of the paginator object against the patternURL.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *URL</Declaration>
			
			
			<Anchor>//api/name/URL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/URL</TokenIdentifier>
			<Abstract type="html">Returns a complete URL to the paginated resource collection by interpolating the state of the paginator object against the patternURL.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *URL</Declaration>
			
			
			<Anchor>//api/name/URL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setOperationQueue:</TokenIdentifier>
			<Abstract type="html">An optional operation queue on which object request operations constructed by the paginator are to be enqueued for processing.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/operationQueue</TokenIdentifier>
			<Abstract type="html">An optional operation queue on which object request operations constructed by the paginator are to be enqueued for processing.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setHTTPOperationClass:</TokenIdentifier>
			<Abstract type="html">Sets the RKHTTPRequestOperation subclass to be used when constructing HTTP request operations for requests dispatched by the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)setHTTPOperationClass:(Class)operationClass</Declaration>
			
			
			<Anchor>//api/name/setHTTPOperationClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setCompletionBlockWithSuccess:failure:</TokenIdentifier>
			<Abstract type="html">Sets the completion block to be invoked when the paginator finishes loading a page of results.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)setCompletionBlockWithSuccess:(void ( ^ ) ( RKPaginator *paginator , NSArray *objects , NSUInteger page ))success failure:(void ( ^ ) ( RKPaginator *paginator , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">A block to be executed upon a successful load of a page of objects. The block has no return value and takes three arguments: the paginator object, an array containing the paginated objects, and an integer indicating the page that was loaded.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block to be exected upon a failed load. The block has no return value and takes two arguments: the paginator object and an error indicating the nature of the failure.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCompletionBlockWithSuccess:failure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setMappingResult:</TokenIdentifier>
			<Abstract type="html">The mapping result containing the last set of paginated objects or nil if an error was encountered.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) RKMappingResult *mappingResult</Declaration>
			
			
			<Anchor>//api/name/mappingResult</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/mappingResult</TokenIdentifier>
			<Abstract type="html">The mapping result containing the last set of paginated objects or nil if an error was encountered.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) RKMappingResult *mappingResult</Declaration>
			
			
			<Anchor>//api/name/mappingResult</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setError:</TokenIdentifier>
			<Abstract type="html">The error, if any, that occured during the last load of the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/error</TokenIdentifier>
			<Abstract type="html">The error, if any, that occured during the last load of the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setPaginationMapping:</TokenIdentifier>
			<Abstract type="html">The object mapping defining how pagination metadata is to be mapped from a paginated response onto the paginator object.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKObjectMapping *paginationMapping</Declaration>
			
			
			<Anchor>//api/name/paginationMapping</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/paginationMapping</TokenIdentifier>
			<Abstract type="html">The object mapping defining how pagination metadata is to be mapped from a paginated response onto the paginator object.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) RKObjectMapping *paginationMapping</Declaration>
			
			
			<Anchor>//api/name/paginationMapping</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setManagedObjectContext:</TokenIdentifier>
			<Abstract type="html">The managed object context in which paginated managed objects are to be persisted.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/managedObjectContext</TokenIdentifier>
			<Abstract type="html">The managed object context in which paginated managed objects are to be persisted.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setManagedObjectCache:</TokenIdentifier>
			<Abstract type="html">The managed object cache used to find existing managed object instances in the persistent store.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id&lt;RKManagedObjectCaching&gt; managedObjectCache</Declaration>
			
			
			<Anchor>//api/name/managedObjectCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/managedObjectCache</TokenIdentifier>
			<Abstract type="html">The managed object cache used to find existing managed object instances in the persistent store.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id&lt;RKManagedObjectCaching&gt; managedObjectCache</Declaration>
			
			
			<Anchor>//api/name/managedObjectCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setFetchRequestBlocks:</TokenIdentifier>
			<Abstract type="html">An array of fetch request blocks.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/fetchRequestBlocks</TokenIdentifier>
			<Abstract type="html">An array of fetch request blocks.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, copy) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setPerPage:</TokenIdentifier>
			<Abstract type="html">The number of objects to load per page</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSUInteger perPage</Declaration>
			
			
			<Anchor>//api/name/perPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/perPage</TokenIdentifier>
			<Abstract type="html">The number of objects to load per page</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) NSUInteger perPage</Declaration>
			
			
			<Anchor>//api/name/perPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setLoaded:</TokenIdentifier>
			<Abstract type="html">A Boolean value indicating if the paginator has loaded a page of objects</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, getter=isLoaded) BOOL loaded</Declaration>
			
			<ReturnValue><Abstract type="html">YES when the paginator has loaded a page of objects</Abstract></ReturnValue>
			<Anchor>//api/name/loaded</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/loaded</TokenIdentifier>
			<Abstract type="html">A Boolean value indicating if the paginator has loaded a page of objects</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, getter=isLoaded) BOOL loaded</Declaration>
			
			<ReturnValue><Abstract type="html">YES when the paginator has loaded a page of objects</Abstract></ReturnValue>
			<Anchor>//api/name/loaded</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setCurrentPage:</TokenIdentifier>
			<Abstract type="html">Returns the page number for the most recently loaded page of objects.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger currentPage</Declaration>
			
			<ReturnValue><Abstract type="html">The page number for the current page of objects.</Abstract></ReturnValue>
			<Anchor>//api/name/currentPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/currentPage</TokenIdentifier>
			<Abstract type="html">Returns the page number for the most recently loaded page of objects.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger currentPage</Declaration>
			
			<ReturnValue><Abstract type="html">The page number for the current page of objects.</Abstract></ReturnValue>
			<Anchor>//api/name/currentPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setPageCount:</TokenIdentifier>
			<Abstract type="html">Returns the number of pages in the total resource collection.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pageCount</Declaration>
			
			<ReturnValue><Abstract type="html">A count of the number of pages in the resource collection.</Abstract></ReturnValue>
			<Anchor>//api/name/pageCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/pageCount</TokenIdentifier>
			<Abstract type="html">Returns the number of pages in the total resource collection.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pageCount</Declaration>
			
			<ReturnValue><Abstract type="html">A count of the number of pages in the resource collection.</Abstract></ReturnValue>
			<Anchor>//api/name/pageCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/setObjectCount:</TokenIdentifier>
			<Abstract type="html">Returns the total number of objects in the collection</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger objectCount</Declaration>
			
			<ReturnValue><Abstract type="html">A count of the number of objects in the resource collection.</Abstract></ReturnValue>
			<Anchor>//api/name/objectCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKPaginator/objectCount</TokenIdentifier>
			<Abstract type="html">Returns the total number of objects in the collection</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger objectCount</Declaration>
			
			<ReturnValue><Abstract type="html">A count of the number of objects in the resource collection.</Abstract></ReturnValue>
			<Anchor>//api/name/objectCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/hasPageCount</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value indicating if the total number of pages in the collection is known by the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasPageCount</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the paginator knows the page count, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/hasPageCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/hasObjectCount</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value indicating if the total number of objects in the collection is known by the paginator.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasObjectCount</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the paginator knows the number of objects in the paginated collection, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/hasObjectCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/hasNextPage</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value indicating if there is a next page in the collection.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasNextPage</Declaration>
			
			<ReturnValue><Abstract type="html">YES if there is a next page, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/hasNextPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/hasPreviousPage</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value indicating if there is a previous page in the collection.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasPreviousPage</Declaration>
			
			<ReturnValue><Abstract type="html">YES if there is a previous page, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/hasPreviousPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/loadNextPage</TokenIdentifier>
			<Abstract type="html">Loads the next page of data by incrementing the current page, constructing an object loader to fetch the data, and object mapping the results.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)loadNextPage</Declaration>
			
			
			<Anchor>//api/name/loadNextPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/loadPreviousPage</TokenIdentifier>
			<Abstract type="html">Loads the previous page of data by decrementing the current page, constructing an object loader to fetch the data, and object mapping the results.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)loadPreviousPage</Declaration>
			
			
			<Anchor>//api/name/loadPreviousPage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/loadPage:</TokenIdentifier>
			<Abstract type="html">Loads a specific page of data by mutating the current page, constructing an object loader to fetch the data, and object mapping the results.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)loadPage:(NSUInteger)pageNumber</Declaration>
			<Parameters>
				<Parameter>
					<Name>pageNumber</Name>
					<Abstract type="html">The page of objects to load from the remote backend</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadPage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKPaginator/cancel</TokenIdentifier>
			<Abstract type="html">Cancels an in-progress pagination request.</Abstract>
			<DeclaredIn>RKPaginator.h</DeclaredIn>			
			
			<Declaration>- (void)cancel</Declaration>
			
			
			<Anchor>//api/name/cancel</Anchor>
		</Token>
		
	</File>
</Tokens>