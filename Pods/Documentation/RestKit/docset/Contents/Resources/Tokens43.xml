<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKResponseMapperOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKResponseMapperOperation</TokenIdentifier>
			<Abstract type="html">RKResponseMapperOperation is an NSOperation that provides support for performing object mapping on an NSHTTPURLResponse and its associated response data.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>
			
			<NodeRef refid="43"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/initWithResponse:data:responseDescriptors:</TokenIdentifier>
			<Abstract type="html">Initializes and returns a newly created response mapper operation with the given response object, response data, and an array of RKResponseDescriptor objects.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>- (id)initWithResponse:(NSHTTPURLResponse *)response data:(NSData *)data responseDescriptors:(NSArray *)responseDescriptors</Declaration>
			<Parameters>
				<Parameter>
					<Name>response</Name>
					<Abstract type="html">The HTTP response object to be used for object mapping.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">The data loaded for the response body.</Abstract>
				</Parameter><Parameter>
					<Name>responseDescriptors</Name>
					<Abstract type="html">An array whose elements are RKResponseDescriptor objects specifying object mapping configurations that may be applied to the response.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the response, data, and response descriptor objects.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithResponse:data:responseDescriptors:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setResponse:</TokenIdentifier>
			<Abstract type="html">The response object that loaded the data that is to be object mapped by the operation. Cannot be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSHTTPURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/response</TokenIdentifier>
			<Abstract type="html">The response object that loaded the data that is to be object mapped by the operation. Cannot be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSHTTPURLResponse *response</Declaration>
			
			
			<Anchor>//api/name/response</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setData:</TokenIdentifier>
			<Abstract type="html">The response data that is to be deserialized and mapped by the operation. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSData *data</Declaration>
			
			
			<Anchor>//api/name/data</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/data</TokenIdentifier>
			<Abstract type="html">The response data that is to be deserialized and mapped by the operation. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSData *data</Declaration>
			
			
			<Anchor>//api/name/data</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setResponseDescriptors:</TokenIdentifier>
			<Abstract type="html">An array of RKResponseDescriptor objects that specify object mapping configurations that may be applied to the deserialized response data if they are found to match the response.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *responseDescriptors</Declaration>
			
			
			<Anchor>//api/name/responseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/responseDescriptors</TokenIdentifier>
			<Abstract type="html">An array of RKResponseDescriptor objects that specify object mapping configurations that may be applied to the deserialized response data if they are found to match the response.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *responseDescriptors</Declaration>
			
			
			<Anchor>//api/name/responseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setTargetObject:</TokenIdentifier>
			<Abstract type="html">The target object for the object mapping operation performed on the deserialized response data. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id targetObject</Declaration>
			
			
			<Anchor>//api/name/targetObject</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/targetObject</TokenIdentifier>
			<Abstract type="html">The target object for the object mapping operation performed on the deserialized response data. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id targetObject</Declaration>
			
			
			<Anchor>//api/name/targetObject</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setMapperDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate for the RKMapperOperation created by the receiver to perform object mapping on the deserialized response data. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, weak) id&lt;RKMapperOperationDelegate&gt; mapperDelegate</Declaration>
			
			
			<Anchor>//api/name/mapperDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/mapperDelegate</TokenIdentifier>
			<Abstract type="html">The delegate for the RKMapperOperation created by the receiver to perform object mapping on the deserialized response data. May be nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, weak) id&lt;RKMapperOperationDelegate&gt; mapperDelegate</Declaration>
			
			
			<Anchor>//api/name/mapperDelegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setTreatsEmptyResponseAsSuccess:</TokenIdentifier>
			<Abstract type="html">A Boolean value that indicates if the receiver should consider empty responses as being successfully mapped even though no mapping is actually performed.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL treatsEmptyResponseAsSuccess</Declaration>
			
			
			<Anchor>//api/name/treatsEmptyResponseAsSuccess</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/treatsEmptyResponseAsSuccess</TokenIdentifier>
			<Abstract type="html">A Boolean value that indicates if the receiver should consider empty responses as being successfully mapped even though no mapping is actually performed.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL treatsEmptyResponseAsSuccess</Declaration>
			
			
			<Anchor>//api/name/treatsEmptyResponseAsSuccess</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setResponseMappingsDictionary:</TokenIdentifier>
			<Abstract type="html">Returns a dictionary of key path to RKMapping objects that are applicable to mapping the response. This is determined by evaluating the URL and status codes of the response against the set of responseDescriptors.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *responseMappingsDictionary</Declaration>
			
			
			<Anchor>//api/name/responseMappingsDictionary</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/responseMappingsDictionary</TokenIdentifier>
			<Abstract type="html">Returns a dictionary of key path to RKMapping objects that are applicable to mapping the response. This is determined by evaluating the URL and status codes of the response against the set of responseDescriptors.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *responseMappingsDictionary</Declaration>
			
			
			<Anchor>//api/name/responseMappingsDictionary</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setMatchingResponseDescriptors:</TokenIdentifier>
			<Abstract type="html">Returns an array containing all RKResponseDescriptor objects in the configured responseDescriptors array that were found to match response.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *matchingResponseDescriptors</Declaration>
			
			
			<Anchor>//api/name/matchingResponseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/matchingResponseDescriptors</TokenIdentifier>
			<Abstract type="html">Returns an array containing all RKResponseDescriptor objects in the configured responseDescriptors array that were found to match response.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSArray *matchingResponseDescriptors</Declaration>
			
			
			<Anchor>//api/name/matchingResponseDescriptors</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setMappingResult:</TokenIdentifier>
			<Abstract type="html">The results of performing object mapping on the deserialized response data. In the event that the operation has failed, the value will is nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) RKMappingResult *mappingResult</Declaration>
			
			
			<Anchor>//api/name/mappingResult</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/mappingResult</TokenIdentifier>
			<Abstract type="html">The results of performing object mapping on the deserialized response data. In the event that the operation has failed, the value will is nil.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) RKMappingResult *mappingResult</Declaration>
			
			
			<Anchor>//api/name/mappingResult</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setError:</TokenIdentifier>
			<Abstract type="html">The error, if any, that occured during execution of the operation.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKResponseMapperOperation/error</TokenIdentifier>
			<Abstract type="html">The error, if any, that occured during execution of the operation.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong, readonly) NSError *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKResponseMapperOperation/setWillMapDeserializedResponseBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed before the response mapper operation begins mapping the deserialized response body, providing an opportunity to manipulate the mappable representation input before mapping begins.</Abstract>
			<DeclaredIn>RKResponseMapperOperation.h</DeclaredIn>			
			
			<Declaration>- (void)setWillMapDeserializedResponseBlock:(id ( ^ ) ( id deserializedResponseBody ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed before the deserialized response is passed to the response mapper. The block has an id return type and must return a dictionary or array of dictionaries corresponding to the object representations that are to be mapped. The block accepts a single argument: the deserialized response data that was loaded via HTTP. If you do not wish to make any chances to the response body before mapping begins, the block should return the value passed in the deserializedResponseBody block argument. Returning nil will decline the mapping from proceeding and fail the operation with an error with the RKMappingErrorMappingDeclined code.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWillMapDeserializedResponseBlock:</Anchor>
		</Token>
		
	</File>
</Tokens>