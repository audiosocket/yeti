<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/RKSearchIndexerDelegate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/RKSearchIndexerDelegate</TokenIdentifier>
			<Abstract type="html">Objects that acts as the delegate for a RKSearchIndexer object must adopt the RKSearchIndexerDelegate protocol. The delegate may customize the behavior of the search indexer to match the needs of the application in several ways. The delegate may provide an alternate implementation for fetching an existing RKSearchWord managed object for a given word, it  is consulted when the indexer determines that a new search word object is to be inserted and may decline the insertion, and it is notified after a new search word has been inserted.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>
			
			<NodeRef refid="66"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/RKSearchIndexerDelegate/searchIndexer:searchWordForWord:inManagedObjectContext:error:</TokenIdentifier>
			<Abstract type="html">Asks the delegate for an existing search word object for a given word in the managed object context being indexed. If no search word is found for the given word, then nil is to be returned.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>			
			
			<Declaration>- (RKSearchWord *)searchIndexer:(RKSearchIndexer *)searchIndexer searchWordForWord:(NSString *)word inManagedObjectContext:(NSManagedObjectContext *)managedObjectContext error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchIndexer</Name>
					<Abstract type="html">The search indexer object performing the indexing.</Abstract>
				</Parameter><Parameter>
					<Name>word</Name>
					<Abstract type="html">The search word for which to retrieve an existing</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The managed object context in which indexing is taking place.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to an error object to be set in the event an error occurs.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The RKSearchWord object corresponding to the given word, or nil if none could be found. In the event an error occurs, nil is to be returned and the value of the error property is to be set to a pointer to an NSError object describing the failure.</Abstract></ReturnValue>
			<Anchor>//api/name/searchIndexer:searchWordForWord:inManagedObjectContext:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/RKSearchIndexerDelegate/searchIndexer:shouldIndexManagedObject:</TokenIdentifier>
			<Abstract type="html">Asks the delegate is a managed object should be indexed.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>			
			
			<Declaration>- (BOOL)searchIndexer:(RKSearchIndexer *)searchIndexer shouldIndexManagedObject:(NSManagedObject *)managedObject</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchIndexer</Name>
					<Abstract type="html">The search indexer object performing the indexing.</Abstract>
				</Parameter><Parameter>
					<Name>managedObject</Name>
					<Abstract type="html">The managed object the indexer is preparing to index.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if indexing should proceed, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/searchIndexer:shouldIndexManagedObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/RKSearchIndexerDelegate/searchIndexer:didIndexManagedObject:</TokenIdentifier>
			<Abstract type="html">Tells the delegate that the indexer has finished indexing a managed object.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>			
			
			<Declaration>- (void)searchIndexer:(RKSearchIndexer *)searchIndxer didIndexManagedObject:(NSManagedObject *)managedObject</Declaration>
			<Parameters>
				<Parameter>
					<Name>managedObject</Name>
					<Abstract type="html">The managed object the indexer has just finished indexing.</Abstract>
				</Parameter><Parameter>
					<Name>searchIndexer</Name>
					<Abstract type="html">The search indexer object performing the indexing.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/searchIndexer:didIndexManagedObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/RKSearchIndexerDelegate/searchIndexer:shouldInsertSearchWordForWord:inManagedObjectContext:</TokenIdentifier>
			<Abstract type="html">Asks the delegate if the indexer should insert a new search word for a word that does not currently exist in the index.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>			
			
			<Declaration>- (BOOL)searchIndexer:(RKSearchIndexer *)searchIndexer shouldInsertSearchWordForWord:(NSString *)word inManagedObjectContext:(NSManagedObjectContext *)managedObjectContext</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchIndexer</Name>
					<Abstract type="html">The search indexer object performing the indexing.</Abstract>
				</Parameter><Parameter>
					<Name>word</Name>
					<Abstract type="html">A search word that appears in an indexed object but does not yet exist in the index.</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The managed object context in which indexing is taking place.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the indexer should insert an RKSearchWord object for the given word, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/searchIndexer:shouldInsertSearchWordForWord:inManagedObjectContext:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/RKSearchIndexerDelegate/searchIndexer:didInsertSearchWord:forWord:inManagedObjectContext:</TokenIdentifier>
			<Abstract type="html">Tells the delegate that the indexer has inserted a new search word object for a word.</Abstract>
			<DeclaredIn>RKSearchIndexer.h</DeclaredIn>			
			
			<Declaration>- (void)searchIndexer:(RKSearchIndexer *)searchIndexer didInsertSearchWord:(RKSearchWord *)searchWord forWord:(NSString *)word inManagedObjectContext:(NSManagedObjectContext *)managedObjectContext</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchIndexer</Name>
					<Abstract type="html">The search indexer object performing the indexing.</Abstract>
				</Parameter><Parameter>
					<Name>searchWord</Name>
					<Abstract type="html">The search word that was inserted.</Abstract>
				</Parameter><Parameter>
					<Name>word</Name>
					<Abstract type="html">The word for which the search word object was created.</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The managed object context in which indexing is taking place.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/searchIndexer:didInsertSearchWord:forWord:inManagedObjectContext:</Anchor>
		</Token>
		
	</File>
</Tokens>