<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSBundle+RKAdditions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSBundle(RKAdditions)</TokenIdentifier>
			<Abstract type="html">Provides convenience methods for accessing data in resources within an NSBundle.</Abstract>
			<DeclaredIn>NSBundle+RKAdditions.h</DeclaredIn>
			
			<NodeRef refid="59"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSBundle(RKAdditions)/MIMETypeForResource:withExtension:</TokenIdentifier>
			<Abstract type="html">Returns the MIME Type for the resource identified by the specified name and file extension.</Abstract>
			<DeclaredIn>NSBundle+RKAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSString *)MIMETypeForResource:(NSString *)name withExtension:(NSString *)extension</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the resource file.</Abstract>
				</Parameter><Parameter>
					<Name>extension</Name>
					<Abstract type="html">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The MIME Type for the resource file or nil if the file could not be located.</Abstract></ReturnValue>
			<Anchor>//api/name/MIMETypeForResource:withExtension:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSBundle(RKAdditions)/dataWithContentsOfResource:withExtension:</TokenIdentifier>
			<Abstract type="html">Creates and returns a data object by reading every byte from the resource identified by the specified name and file extension.</Abstract>
			<DeclaredIn>NSBundle+RKAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSData *)dataWithContentsOfResource:(NSString *)name withExtension:(NSString *)extension</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the resource file.</Abstract>
				</Parameter><Parameter>
					<Name>extension</Name>
					<Abstract type="html">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A data object by reading every byte from the resource file.</Abstract></ReturnValue>
			<Anchor>//api/name/dataWithContentsOfResource:withExtension:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSBundle(RKAdditions)/stringWithContentsOfResource:withExtension:encoding:</TokenIdentifier>
			<Abstract type="html">Creates and returns a string object by reading data from the resource identified by the specified name and file extension using a given encoding.</Abstract>
			<DeclaredIn>NSBundle+RKAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringWithContentsOfResource:(NSString *)name withExtension:(NSString *)extension encoding:(NSStringEncoding)encoding</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the resource file.</Abstract>
				</Parameter><Parameter>
					<Name>extension</Name>
					<Abstract type="html">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</Abstract>
				</Parameter><Parameter>
					<Name>encoding</Name>
					<Abstract type="html">The encoding of the resource file.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string created by reading data from the resource file using the encoding.</Abstract></ReturnValue>
			<Anchor>//api/name/stringWithContentsOfResource:withExtension:encoding:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSBundle(RKAdditions)/parsedObjectWithContentsOfResource:withExtension:</TokenIdentifier>
			<Abstract type="html">Creates and returns an object representation of the data from the resource identified by the specified name and file extension by reading the
data as a string and parsing it using a parser appropriate for the MIME Type of the file.</Abstract>
			<DeclaredIn>NSBundle+RKAdditions.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKMIMETypeSerialization</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)parsedObjectWithContentsOfResource:(NSString *)name withExtension:(NSString *)extension</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the resource file.</Abstract>
				</Parameter><Parameter>
					<Name>extension</Name>
					<Abstract type="html">If extension is an empty string or nil, the extension is assumed not to exist and the file is the first file encountered that exactly matches name.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new image object for the specified file, or nil if the method could not initialize the image from the specified file.</Abstract></ReturnValue>
			<Anchor>//api/name/parsedObjectWithContentsOfResource:withExtension:</Anchor>
		</Token>
		
	</File>
</Tokens>