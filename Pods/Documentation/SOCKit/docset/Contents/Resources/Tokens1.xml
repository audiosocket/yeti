<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SOCPattern.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SOCPattern</TokenIdentifier>
			<Abstract type="html">String &lt;-&gt; Object Coding.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/initWithString:</TokenIdentifier>
			<Abstract type="html">Initializes a newly allocated pattern object with the given pattern string.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/initWithString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SOCPattern/patternWithString:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
			<Declaration>+ (id)patternWithString:(NSString *)string</Declaration>
			
			
			<Anchor>//api/name/patternWithString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/stringMatches:</TokenIdentifier>
			<Abstract type="html">Returns YES if the given string can be used with performSelector:onObject:sourceString: or
extractParameterKeyValuesFromSourceString:.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)stringMatches:(NSString *)string</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">A string that may or may not conform to this pattern.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the given string conforms to this pattern, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/stringMatches:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/performSelector:onObject:sourceString:</TokenIdentifier>
			<Abstract type="html">Performs the given selector on the object with the matching parameter values from sourceString.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
			<Declaration>- (id)performSelector:(SEL)selector onObject:(id)object sourceString:(NSString *)sourceString</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to perform on the object. If there aren&apos;t enough
parameters in the pattern then the excess parameters in the selector
will be nil.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to perform the selector on.</Abstract>
				</Parameter><Parameter>
					<Name>sourceString</Name>
					<Abstract type="html">A string that conforms to this pattern. The parameter values from
this string are used as the arguments when performing the selector
on the object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The initialized, autoreleased object if the selector is an initializer
(prefixed with &quot;init&quot;) and object is a Class, otherwise the return value from
invoking the selector.</Abstract></ReturnValue>
			<Anchor>//api/name/performSelector:onObject:sourceString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/parameterDictionaryFromSourceString:</TokenIdentifier>
			<Abstract type="html">Extracts the matching parameter values from sourceString into an NSDictionary.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)parameterDictionaryFromSourceString:(NSString *)sourceString</Declaration>
			<Parameters>
				<Parameter>
					<Name>sourceString</Name>
					<Abstract type="html">A string that conforms to this pattern. The parameter values from
this string are extracted into the NSDictionary.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of key value pairs. All values will be NSStrings. The keys will
correspond to the pattern&apos;s parameter names. Duplicate key values will be
overwritten by later values.</Abstract></ReturnValue>
			<Anchor>//api/name/parameterDictionaryFromSourceString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/stringFromObject:</TokenIdentifier>
			<Abstract type="html">Returns a string with the parameters of this pattern replaced using Key-Value Coding (KVC)
on the receiving object.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/stringFromObject:withBlock:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)stringFromObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object whose properties will be used to replace the parameters in
the pattern.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string with the pattern parameters replaced by the object property values.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/stringFromObject:withBlock:</TokenIdentifier>
			<Abstract type="html">Returns a string with the parameters of this pattern replaced using Key-Value Coding (KVC)
on the receiving object, and the result is (optionally) modified or encoded by the block.</Abstract>
			<DeclaredIn>SOCKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/SOCPattern/stringFromObject:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)stringFromObject:(id)object withBlock:(NSString *( ^ ) ( NSString *))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object whose properties will be used to replace the parameters in
the pattern.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">An optional block (may be nil) that modifies or encodes each
property value string. The block accepts one parameter - the property
value as a string - and should return the modified property string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string with the pattern parameters replaced by the block-processed object
property values.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromObject:withBlock:</Anchor>
		</Token>
		
	</File>
</Tokens>